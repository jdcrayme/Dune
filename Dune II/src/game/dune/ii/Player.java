package game.dune.ii;

import game.dune.ii.GameObjectFactory.GameObject;
import game.dune.ii.GameSound.Sounds;

import java.util.ArrayList;
import java.util.List;

import org.andengine.opengl.shader.ShaderProgram;

/**
 * (c) 2012 Joshua Craymer
 *
 * @author Joshua Craymer
 * @since 02:08:29Z - 25 Oct 2012
 * 
 * This class holds the data for an individual player, human or computer
 */
public class Player {
	// ===========================================================
	// Constants
	// ===========================================================

	public enum House {ATR,ORD,HAR,EMP,MER}
	public enum Brain {HUMAN,CPU}

	// ===========================================================
	// Fields
	// ===========================================================

	private List<GameObject> objects = new ArrayList<GameObject>();		//These are the currently active objects
	private List<GameObject> newObjects = new ArrayList<GameObject>();	//These are the objects to be added at the end of the next cycle

	private String name;	//The player name
	private House house;	//The player house
	public Brain brain;
	private int credits;	//The player credits
	private int quota;		//The player's harvesting quota
	private int maxUnits;	//The maximum number of units this player can have
	
	private int powerReq; 	//The power needed by the player
	private int powerGen;	//The power generated by the player
	private boolean powered;//Is the grid powered

	private ShaderProgram shader;
	
	// ===========================================================
	// Constructors
	// ===========================================================
	
	public Player(House house, Brain brain, int credits, int quota, int maxUnits) {
		this.name = "name";
		this.house = house;
		this.brain = brain;
		this.credits = credits;
		this.quota = quota;
		this.maxUnits = maxUnits;
		this.powered = true;
		
		switch(house)
		{
			case ATR:
				this.shader = new ShaderColorReplace(new org.andengine.util.color.Color(0,0,1));
				break;
			case ORD:
				this.shader = new ShaderColorReplace(new org.andengine.util.color.Color(0,1,0));
				break;
			case HAR:
				this.shader = new ShaderColorReplace(new org.andengine.util.color.Color(1,0,0));
				break;
			default:
				this.shader = new ShaderColorReplace(new org.andengine.util.color.Color(1,1,0));
		}
	}

	// ===========================================================
	// Getters & Setters
	// ===========================================================


	/**
	 * @return The player name 
	 */
	public String getName() { return name; }

	/**
	 * @return The player house 
	 */
	public House getHouse() { return house; }

	/**
	 * @return The player color 
	 */
	public int getColor() {
		switch(house)
		{
			case ATR:
				return R.color.atreides_color;
			case ORD:
				return R.color.ordos_color;
			case HAR:
				return R.color.harkonen_color;
			default:
				return R.color.atreides_color;
		}
	}


	/**
	 * @return The player credits 
	 */
	public int getCredits() { return credits; }

	/**
	 * @return The player credits 
	 */
	public int getQuota() { return quota; }

	/**
	 * @return The player credits 
	 */
	public int getMaxUnits() { return maxUnits; }

	/**
	 * @return The power needed by the player 
	 */
	public int getPowerRequired() {	return powerReq; }

	/**
	 * @return The power generated by the player 
	 */
	public int getPowerGenerated() { return powerGen; }

	/**
	 * @return The objects owned by the player 
	 */
	public List<GameObject> getObjects() {return objects;	}

	// ===========================================================
	// Methods for/from SuperClass/Interfaces
	// ===========================================================

	// ===========================================================
	// Non-inherited Methods
	// ===========================================================

	/**
	 * Add power to the players grid  
	 * @param power - The power to add
	 */
	public void generatePower(int power)
	{
		powerGen+=power;
	}

	/**
	 * Consume power from the players grid 
	 * @param power - The power to consume
	 */
	public boolean consumePower(int power)
	{
		powerReq+=power;
		return powered;
	}
	
	/**
	 * Update the player
	 */
	public void Update()
	{
		updatePlayerPower();

		//Update all the player objects
		updateAllPlayerObjectLogic();
		
		//Move all the new objects into the list and clear the newObject list 
		objects.addAll(newObjects);
		newObjects.clear();
	}
	
	/**
	 * Update the power consumption
	 */
	private void updatePlayerPower() {
		powerReq = powerGen = 0;

		ComponentPowerFactory.update();
		
		if(powerGen<powerReq)
			powered = false;
		else
			powered = true;
	}

	/**
	 * Update the logic for the players units and structures
	 */
	private void updateAllPlayerObjectLogic()
	{
		//long currentTime = System.currentTimeMillis();
		
		/*for(int i = 0; i < objects.size(); i++)
		{
			GameObject obj = objects.get(i);
			//obj.updateLogic(currentTime-lastTime);
		}
		
		lastTime = currentTime;*/
	}

	/**
	 * Try to spend some money. If the player does not have enough then return false.
	 * Otherwise, decrement the credits from the player then return true.
	 * 
	 * @param credits - How much money
	 * @return		  - Did we over draw
	 */
	public boolean chargeCredits(int credits) {
		if(this.credits < credits)
			return false;
			
		if(this.brain == Brain.HUMAN&&credits!=0)
			GameSound.sound.playSound(Sounds.Credit);
			
		this.credits-=credits;
		return true;
	}

	public ShaderProgram getShader() {
		return shader;
	}
}
